element.off() - Removes all event listeners
element.off("click") - Removes all click event listeners
element.off("click", handler) - Removes a specific click event handler

// Add a click event listener to a button
const btn = document.getElementById("myButton");
btn.on("click", function() {
  console.log("Button clicked!");
});

// Add event to multiple elements at once
document.querySelectorAll(".items").on("mouseover", function() {
  this.classList.add("hover");
});

// Remove all event listeners from an element
btn.off();

// Remove all click events
btn.off("click");

// Remove a specific event handler
const handler = function() { alert("Hello!"); };
btn.on("click", handler);
// Later...
btn.off("click", handler);

// Method chaining
btn.on("click", fn1).on("mouseover", fn2).off("mouseout");

// Prevent default action for a click
btn.on("click", () => {
  console.log("Clicked but form won't submit");
}).prevent();

// Stop event propagation
btn.on("click", () => {
  console.log("Clicked but parent elements won't receive the event");
}).stop();

// Chain both methods
btn.on("click", () => {
  console.log("Clicked with both prevent and stop");
}).prevent().stop();

// Works with multiple elements
document.querySelectorAll(".link").on("click", function() {
  this.classList.add("visited");
}).prevent();

WeakMap(
  element1 → Map(
    "click" → [handler1, handler2],
    "mouseover" → [handler3]
  ),
  element2 → Map(
    "input" → [handler4]
  )
)

// Click event with callback function
element.$click(function(event) {
  console.log('Clicked!', this);  // 'this' refers to the element
});

// Prevent default behavior
element.$submit(function(event) {
  // Do something
}).prevent();

// Stop propagation
element.$click(function(event) {
  // Do something
}).stop();

// Chain prevent and stop
element.$click(function(event) {
  // Do something
}).prevent().stop();

// Remove event listener
element.$removeClick(callbackFunction);