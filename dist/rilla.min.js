function $(selector){return $select(document,selector)}Element.prototype.$=function(selector){return $select(this,selector)};function $select(context,selector){if(typeof selector!=="string"||!selector.trim()){console.error(`$: Invalid selector "${selector}"`);return null}if(!(context instanceof Element)&&context!==document){console.error(`$: Invalid context`,context);return null}let elements;try{elements=context.querySelectorAll(selector)}catch(error){console.error(`$: Invalid CSS selector "${selector}"`,error);return null}if(!elements.length){console.error(`$: ${selector} not found.`);return null}if(selector.startsWith("#")&&elements.length>1){console.warn(`$: (${elements.length}) ${selector} elements found.`);return elements[0]}return elements.length===1?elements[0]:elements}const $events=["click","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave","keydown","keyup","keypress","input","change","submit","focus","blur","reset","touchstart","touchend","touchmove","touchcancel","scroll","resize","load","unload","beforeunload","dragstart","drag","dragenter","dragleave","dragover","drop","dragend","cut","copy","paste","play","pause","ended","volumechange","timeupdate","focusin","focusout","wheel","scroll","contextmenu","select"];$events.forEach((eventName=>{Element.prototype[`$${eventName}`]=function(callback,options={}){if(callback==null){console.error(`$${eventName}: Callback cannot be null or undefined`);return this}if(typeof callback==="string"){try{if(typeof window[callback]==="function"){callback=window[callback]}else{callback=new Function("event",callback)}}catch(error){console.error(`$${eventName}: Could not resolve function from string "${callback}"`,error);return this}}if(typeof callback!=="function"){console.error(`$${eventName}: Callback must be a function or a valid function string`);return this}const wrappedCallback=event=>{try{if(options.preventDefault){event.preventDefault()}if(options.stopPropagation){event.stopPropagation()}const result=callback.call(this,event);if(result instanceof Promise){result.catch((error=>{console.error(`$${eventName}: Async callback error`,error)}))}return result}catch(error){console.error(`$${eventName}: Callback execution error`,error)}};this.addEventListener(eventName,wrappedCallback,{passive:options.passive??false,capture:options.capture??false,once:options.once??false});return this};Element.prototype[`$remove${eventName.charAt(0).toUpperCase()+eventName.slice(1)}`]=function(callback){if(typeof callback==="function"){this.removeEventListener(eventName,callback)}return this}}));function $window(callback){window.addEventListener("load",callback)}function $dom(callback){document.addEventListener("DOMContentLoaded",callback)}function $set(key,value){localStorage.setItem(key,JSON.stringify(value))}function $get(key){return JSON.parse(localStorage.getItem(key))}function $rem(key){localStorage.removeItem(key)}function $sets(key,value){sessionStorage.setItem(key,JSON.stringify(value))}function $gets(key){return JSON.parse(sessionStorage.getItem(key))}function $rems(key){sessionStorage.removeItem(key)}